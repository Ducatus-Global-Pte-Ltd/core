#!/usr/bin/env node

'use strict';

const program = require('../ts_build/program');
const { Wallet } = require('../ts_build/wallet');
const promptly = require('promptly');

program
  .version(require('../package.json').version)
  .option('--name <name>', 'REQUIRED - Wallet Name')
  .option('--chain <chain>', 'REQUIRED - Chain (BTC/BCH/ETH, etc)')
  .option(
    '--network <network>',
    'REQUIRED - Network (livenet/testnet/regtest, etc)'
  )
  .option('--baseUrl [host]', 'optional - Specify custom Bitcore API URL')
  .option('--path [path]', 'optional - Custom wallet storage path')
  .option('--mnemonic [phrase]', 'optional - Seed using existing backup phrase')
  .option('--storageType [storageType]', 'optional - name of the database to use (Mongo or Level)')
  .option('--phrase [phrase]', 'optional - Seed using existing backup phrase')
  .option('--lite [lite]', 'optional - create a lite version of the wallet with no private keys')
  .option('--authKey [authKey]', 'optional - specify an authkey to sign requests with, only for lite wallets')
  .option('--xPubKey [xPubKey]', 'optional - specify an xpubkey for a lite wallet')
  .parse(process.argv);

const main = async () => {
  const { name, baseUrl, chain, network, path, phrase, storageType, lite, authKey, xPubKey } = program;
  try {
    const password = await promptly.password('Wallet Password:');
    await Wallet.create({
      name,
      baseUrl,
      chain,
      network,
      path,
      phrase,
      password,
      storageType,
      lite,
      authKey,
      xPubKey,
    });
    console.log('Wallet created!');
  } catch (e) {
    console.error(e);
  }
};

main();
