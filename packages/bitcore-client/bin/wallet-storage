#!/usr/bin/env node

'use strict';

const program = require('../ts_build/program');
const { Wallet } = require('../ts_build/wallet');
const promptly = require('promptly');
const { Encryption } = require('../ts_build/encryption');
const Stream = require('stream');

program
  .version(require('../package.json').version)
  .option('--name <name>', 'REQUIRED - Wallet Name')
  .option('--path [path]', 'optional - Custom wallet storage path')
  .option('--storageType [storageType]', 'optional - name of the database to use (Mongo or Level)')
  .option('--exp [exp]', 'export an existing wallet into an encrypted json')
  .option('--imp [imp]', 'import an existing wallet from an encrypted json')
  .option('--lite [lite]', 'optional - do a lite import or export')
  .option('--file [file]', 'optional - specify custom file name for import')
  .parse(process.argv);

const main = async () => {
  const { name, path, storageType, lite, imp, exp, file } = program;
  try {
    const password = await promptly.password('Wallet Password:');
    if (exp) {
      let wallet = await Wallet.loadWallet({ name, storageType, path });
      if (lite) {
        delete wallet.masterKey;
        delete wallet.pubKey;
      }
      delete wallet.storage;
      let walletStream = new Stream.Readable({ objectMode: true });
      walletStream.push(wallet);
      walletStream.push(null);
      Encryption.encryptWallet(name, walletStream, password, null);
      console.log(`Encrypted wallet to ${name}.enc`);
    }
    if (imp) {
      const fileName = file || name + '.enc';
      let walletStream = Encryption.decryptWallet(fileName, password);
      // walletStream.on('data', (data) => {console.log(data)});
    }
  } catch (e) {
    console.error(e);
  }
};

main();
