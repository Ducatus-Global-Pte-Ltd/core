#!/usr/bin/env node --inspect-brk

const program = require('../lib/program');
const Wallet = require('../lib/wallet');
const promptly = require('promptly');

program
  .version(require('../package.json').version)
  .option('--name <name>', 'REQUIRED - Wallet Name')
  .option(
    '--addresses <addresses>',
    'REQUIRED - Address of receiver, or json array \'[{"address": "abc1234", "satoshis": xxxxx}]\''
  )
  .option('--amount <amount>', 'REQUIRED - Value to transfer')
  .option('--utxos <utxos>', 'REQUIRED - Unspent transactions that can be spent')
  .option('--change <change>', 'REQUIRED - Change addresses')
  .option('--fee [fee]', 'optional - custom transaction fee to pay')
  .option('--target [target]', 'optional - custom target block for confirmation')
  .option('--path [path]', 'optional - Custom wallet storage path')
  .parse(process.argv);

const main = async () => {
  const { name, path } = program;
  let wallet;
  try {
    const { addresses, amount, utxos, change, fee, target=2 } = program;
    wallet = await Wallet.loadWallet({ name, path });
    if (utxos) {
      const password = await promptly.password('Wallet Password:');
      wallet = await wallet.unlock(password);
    }

    const calculatedNetworkFee = await wallet.getNetworkFee({ target });

    if (fee < calculatedNetworkFee.feerate) {
      throw new Error(`fee lower than calculated network fee: ${calculatedNetworkFee.feerate}`)
    }

    let params = { addresses, amount, utxos, change, fee };
    params.fee = params.fee ? params.fee : calculatedNetworkFee.feerate;
    params.addresses = addresses.includes('[') ? JSON.parse(addresses) : addresses;
    params.utxos = params.utxos ? JSON.parse(params.utxos) : [];
    const tx = await wallet.newTx(params);
    console.log(tx.uncheckedSerialize());
  } catch (e) {
    console.error(e);
  }
};

main();
